/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type Playlist = {
  _id: string;
  _type: "playlist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  select?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "startup";
  }>;
};

export type Startup = {
  _id: string;
  _type: "startup";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  views?: number;
  description?: string;
  category?: string;
  image?: string;
  pitch?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: number;
  name?: string;
  username?: string;
  email?: string;
  image?: string;
  bio?: string;
};

export type Markdown = string;

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | SanityAssetSourceData | Playlist | Startup | Slug | Author | Markdown;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/querys.ts
// Variable: startups_query
// Query: *[_type == "startup" && defined(slug.current) && (    !defined($search) ||    title match $search ||     category match $search ||     author->name match $search  )] | order(_createdAt desc) {    _id,    title,    slug,    _createdAt,    author->{      _id,      name,      image,      bio,username    },    views,    description,    category,    image  }
export type Startups_queryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  _createdAt: string;
  author: {
    _id: string;
    name: string | null;
    image: string | null;
    bio: string | null;
    username: string | null;
  } | null;
  views: number | null;
  description: string | null;
  category: string | null;
  image: string | null;
}>;
// Variable: startup_by_id_query
// Query: *[_type=="startup" && _id==$id][0]{  _id,title,slug,_createdAt,author ->{    _id,name,image,bio,username  },views,description,category,image,pitch}
export type Startup_by_id_queryResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  _createdAt: string;
  author: {
    _id: string;
    name: string | null;
    image: string | null;
    bio: string | null;
    username: string | null;
  } | null;
  views: number | null;
  description: string | null;
  category: string | null;
  image: string | null;
  pitch: string | null;
} | null;
// Variable: startup_views_id
// Query: *[_type == "startup" && _id == $id][0]{  _id,views  }
export type Startup_views_idResult = {
  _id: string;
  views: number | null;
} | null;
// Variable: author_by_github_query
// Query: *[_type =='author' && id == $id][0]{  _id,  id,  name,  username,  email,  image,  bio      }
export type Author_by_github_queryResult = {
  _id: string;
  id: number | null;
  name: string | null;
  username: string | null;
  email: string | null;
  image: string | null;
  bio: string | null;
} | null;
// Variable: author_by_id_query
// Query: *[_type =='author' && _id == $id][0]{      _id,      id,      name,      username,      email,      image,      bio        }
export type Author_by_id_queryResult = {
  _id: string;
  id: number | null;
  name: string | null;
  username: string | null;
  email: string | null;
  image: string | null;
  bio: string | null;
} | null;
// Variable: startups_by_author_query
// Query: *[_type == "startup" && defined(slug.current) && author._ref==$id] | order(_createdAt desc) {            _id,            title,            slug,            _createdAt,            author->{              _id,              name,              image,              bio,username            },            views,            description,            category,            image          }
export type Startups_by_author_queryResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  _createdAt: string;
  author: {
    _id: string;
    name: string | null;
    image: string | null;
    bio: string | null;
    username: string | null;
  } | null;
  views: number | null;
  description: string | null;
  category: string | null;
  image: string | null;
}>;
// Variable: PLAYLIST_BY_SLUG_QUERY
// Query: *[_type == "playlist" && slug.current == $slug][0]{  _id,  title,  slug,  select[]->{    _id,    _createdAt,    title,    slug,    author->{      _id,      name,      slug,      image,      bio    },    views,    description,    category,    image,    pitch  }}
export type PLAYLIST_BY_SLUG_QUERYResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  select: Array<{
    _id: string;
    _createdAt: string;
    title: string | null;
    slug: Slug | null;
    author: {
      _id: string;
      name: string | null;
      slug: null;
      image: string | null;
      bio: string | null;
    } | null;
    views: number | null;
    description: string | null;
    category: string | null;
    image: string | null;
    pitch: string | null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"startup\" && defined(slug.current) && (\n    !defined($search) ||\n    title match $search || \n    category match $search || \n    author->name match $search\n  )] | order(_createdAt desc) {\n    _id,\n    title,\n    slug,\n    _createdAt,\n    author->{\n      _id,\n      name,\n      image,\n      bio,username\n    },\n    views,\n    description,\n    category,\n    image\n  }\n": Startups_queryResult;
    "*[_type==\"startup\" && _id==$id][0]{\n  _id,title,slug,_createdAt,author ->{\n    _id,name,image,bio,username\n  },views,description,category,image,pitch\n}": Startup_by_id_queryResult;
    "*[_type == \"startup\" && _id == $id][0]{\n  _id,views\n  }": Startup_views_idResult;
    "*[_type =='author' && id == $id][0]{\n  _id,\n  id,\n  name,\n  username,\n  email,\n  image,\n  bio\n\n  \n    }": Author_by_github_queryResult;
    "*[_type =='author' && _id == $id][0]{\n      _id,\n      id,\n      name,\n      username,\n      email,\n      image,\n      bio\n        }": Author_by_id_queryResult;
    "\n          *[_type == \"startup\" && defined(slug.current) && author._ref==$id] | order(_createdAt desc) {\n            _id,\n            title,\n            slug,\n            _createdAt,\n            author->{\n              _id,\n              name,\n              image,\n              bio,username\n            },\n            views,\n            description,\n            category,\n            image\n          }\n        ": Startups_by_author_queryResult;
    "*[_type == \"playlist\" && slug.current == $slug][0]{\n  _id,\n  title,\n  slug,\n  select[]->{\n    _id,\n    _createdAt,\n    title,\n    slug,\n    author->{\n      _id,\n      name,\n      slug,\n      image,\n      bio\n    },\n    views,\n    description,\n    category,\n    image,\n    pitch\n  }\n}": PLAYLIST_BY_SLUG_QUERYResult;
  }
}
